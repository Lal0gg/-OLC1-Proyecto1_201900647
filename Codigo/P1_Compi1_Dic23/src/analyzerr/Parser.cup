// ------------  Paquete e importaciones ------------
package analyzerr;

import java_cup.runtime.*;
import clases.Erroor;
import function.funca;
import java.util.LinkedList; 
import clases.ExpresionRegular;


//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error

parser code 
{:  
    

    public void syntax_error(Symbol s) {       
    if (s.value != null) {
        Erroor errorsito = new Erroor("Sintactico", s.value.toString(), "No es valido en este lenguaje sintact", s.right, s.left);
        funca.ErrorList.add(errorsito);
        System.err.println("Error Sintactico: " + s.value.toString() + "  Fila: " + s.right + "  Columna: " + s.left + ". Recuperado");
    } else {
        // Handle the case where s.value is null (customize this part based on your needs)
        System.err.println("Error Sintactico: Token sin valor asignado  Fila: " + s.right + "  Columna: " + s.left + ". Recuperado");
    }
}

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    if (s.value != null) {
        Erroor errorsito = new Erroor("Sintactico", s.value.toString(), "No es valido en este lenguaje sintact", s.right, s.left);
        funca.ErrorList.add(errorsito);
        System.err.println("Error Sintactico: " + s.value.toString() + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado");
    } else {
        // Handle the case where s.value is null (customize this part based on your needs)
        System.err.println("Error Sintactico: Token sin valor asignado - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado");
    }
}

:}


//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}


//------> Declaración de terminales
terminal String TkCONJ_R,TkPUNTOYCOMA, TkDOSPUNTOS,TkCOMA;
terminal String TkLLAVEA,TkLLAVEC,TkPARENTESISAbre,TkPARENTESISCierra;
terminal String TkDelimitador,TkOr,TkMas,TkInterrogacion,TkConcatenacion;
terminal String TkGuionCurseado,TkGuionNormal,TkGuionBajo;
terminal String TkENTERO,TkDECIMAL,TkCADENA,TkErChar,TkIdentificador,TkICaracter;
terminal String  TKMulti,TkUni,TkICaracterEspecial;
terminal String TkCerraduraKleen;


//------> Declaración de no terminales
non terminal inicio;
non terminal lista_instruccion, instruccion;
non terminal conjunto, expresionReg;
non terminal tokenList , token;


//------> PRECEDENCIA
precedence left TkConcatenacion,TkOr;
//TkCerraduraKleen


//------> Definir Simbolo Inicial
start with inicio; 


// ------------>  Producciones  <------------



inicio::= TkLLAVEA lista_instruccion  TkLLAVEC
;

lista_instruccion::= lista_instruccion instruccion
                    | instruccion
                    
;


instruccion::= conjunto
               | expresionReg
               | error  TkPUNTOYCOMA                
;



conjunto::= TkCONJ_R  TkDOSPUNTOS  TkIdentificador TkDelimitador TkICaracter  TkGuionCurseado TkICaracter  TkPUNTOYCOMA
           |  TkCONJ_R  TkDOSPUNTOS  TkIdentificador TkDelimitador TkICaracter  TkICaracterEspecial TkICaracter  TkPUNTOYCOMA 
           |  TkCONJ_R  TkDOSPUNTOS  TkIdentificador TkDelimitador TkICaracterEspecial  TkICaracterEspecial TkICaracterEspecial  TkPUNTOYCOMA 
           |  TkCONJ_R  TkDOSPUNTOS  TkIdentificador TkDelimitador TkICaracterEspecial  TkGuionCurseado TkICaracterEspecial  TkPUNTOYCOMA 
           |  TkCONJ_R  TkDOSPUNTOS  TkIdentificador TkDelimitador TkENTERO  TkICaracterEspecial TkENTERO  TkPUNTOYCOMA 
           |  TkCONJ_R  TkDOSPUNTOS  TkIdentificador TkDelimitador TkENTERO  TkCOMA TkENTERO  TkPUNTOYCOMA 
;



expresionReg::= TkIdentificador: ID   TkDelimitador:Limitador  tokenList:RegeX  TkPUNTOYCOMA
                {:
                ExpresionRegular ER = new ExpresionRegular(ID.toString(),Limitador.toString(),RegeX.toString());
                funca.HashMapRegex.put(ID.toString(),ER);

                :}
;

tokenList ::= token:val {: 
                        StringBuilder stringBuilder = new StringBuilder();
                        stringBuilder.append(val);
                        RESULT =  stringBuilder;
                        :} 
           | tokenList:v token:val {: 
                                    StringBuilder stringBuilder = new StringBuilder();
                                    stringBuilder.append(v);
                                    stringBuilder.append(val);
                                    RESULT =  stringBuilder;
                                 :}  
;



token ::= TkICaracter:val {:RESULT = " "+val+" ";:} 
        | TkICaracterEspecial:val {:RESULT = val;:} 
        | TkENTERO:val {:RESULT = val;:} 
        | TkDECIMAL:val {:RESULT = val;:} 
        | TkCADENA:val {:RESULT = val;:} 
        | TkErChar:val {:RESULT = val;:} 
        | TkIdentificador:val {:RESULT = val;:} 
        | TkCOMA:val {:RESULT = val;:} 
        | TkDOSPUNTOS:val {:RESULT = val;:} 
        | TkLLAVEA:val {:RESULT = val;:} 
        | TkLLAVEC:val {:RESULT = val;:} 
        | TkPARENTESISAbre:val {:RESULT = val;:} 
        | TkPARENTESISCierra:val {:RESULT = val;:} 
        | TkDelimitador:val {:RESULT = val;:} 
        | TkOr:val {:RESULT = val;:} 
        | TkMas:val {:RESULT = val;:} 
        | TkInterrogacion:val {:RESULT = val;:} 
        | TkConcatenacion:val {:RESULT = val;:} 
        | TkGuionCurseado:val {:RESULT = val;:} 
        | TkGuionNormal:val {:RESULT = val;:} 
        | TkGuionBajo:val {:RESULT = val;:} 
;





